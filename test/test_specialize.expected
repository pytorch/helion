This file is automatically generated by assertExpectedJournal calls in test_specialize.py.
Update expected outputs by running tests with the EXPECTTEST_ACCEPT=1 environment variable set.

--- assertExpectedJournal(TestSpecialize.test_dynamic_size_block_non_power_of_two)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, out_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < 500
    acc = tl.full([_BLOCK_SIZE_0, 512], 0.0, tl.float32)
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    v_0 = 1.0
    v_1 = load + v_0
    v_2 = acc + v_1
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), v_2, mask_0[:, None] & mask_1[None, :])

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(x)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 512
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, out, x.size(0), out.stride(0), out.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_dynamic_size_block_non_power_of_two_double_acc)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, out_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < 500
    acc = tl.full([_BLOCK_SIZE_0, 512], 0.0, tl.float32)
    acc2 = tl.full([_BLOCK_SIZE_0, 512], 1.0, tl.float32)
    v_0 = acc + acc2
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    v_1 = load + v_0
    v_2 = 1.0
    v_3 = v_1 + v_2
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), v_3, mask_0[:, None] & mask_1[None, :])

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(x)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 512
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, out, x.size(0), out.stride(0), out.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_dynamic_size_block_non_power_of_two_matmul)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, out_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < 500
    acc = tl.full([_BLOCK_SIZE_0, 512], 0.001953125, tl.float32)
    acc2 = tl.full([512, 512], 1.0, tl.float32)
    _mask_to = tl.where(tl.broadcast_to(mask_0[:, None], [_BLOCK_SIZE_0, 512]), acc, tl.full([], 0, tl.float32))
    acc_1 = tl.dot(tl.cast(_mask_to, tl.float32), tl.cast(acc2, tl.float32), input_precision='tf32', out_dtype=tl.float32)
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    v_0 = load + acc_1
    v_1 = 1.0
    v_2 = v_0 + v_1
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), v_2, mask_0[:, None] & mask_1[None, :])

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(x)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 512
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, out, x.size(0), out.stride(0), out.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_dynamic_size_block_non_power_of_two_outplace)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, out_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < 500
    acc = tl.full([_BLOCK_SIZE_0, 512], 0.0, tl.float32)
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    v_0 = acc + load
    v_1 = 1.0
    v_2 = v_0 + v_1
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), v_2, mask_0[:, None] & mask_1[None, :])

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(x)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 512
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, out, x.size(0), out.stride(0), out.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_dynamic_size_block_non_power_of_two_swap_order)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, out_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < 500
    acc = tl.full([_BLOCK_SIZE_0, 512], 0.0, tl.float32)
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    v_0 = load + acc
    v_1 = 1.0
    v_2 = v_0 + v_1
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), v_2, mask_0[:, None] & mask_1[None, :])

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(x)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 512
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, out, x.size(0), out.stride(0), out.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_dynamic_size_block_specialize)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, out_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    acc = tl.full([_BLOCK_SIZE_0, 512], 0.0, tl.float32)
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None], other=0)
    v_0 = 1.0
    v_1 = load + v_0
    v_2 = acc + v_1
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), v_2, mask_0[:, None])

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(x)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 512
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, out, x.size(0), out.stride(0), out.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_hl_zeros_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0.0, tl.float32)
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        grad_w_m_copy = grad_w_m
        grad_w_m_copy_0 = grad_w_m_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        grad_w_m = grad_w_m_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), grad_w_m, mask_2)

def reduce_kernel(x: torch.Tensor, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_specialize_host)
from __future__ import annotations

import math
import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, out_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    num_blocks_0 = tl.cdiv(x_size_0, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < 500
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    v_0 = 0.044721359549995794
    v_1 = load * v_0
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), v_1, mask_0[:, None] & mask_1[None, :])

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    scale = 1.0 / math.sqrt(x.size(-1))
    out = torch.empty_like(x)
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0) * triton.cdiv(x.size(1), _BLOCK_SIZE_1),), x, out, x.size(0), out.stride(0), out.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_specialize_reduce)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, out_stride_0, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < x_size_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < 500
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    sum_1 = tl.cast(tl.sum(load, 1), tl.float32)
    tl.store(out + indices_0 * out_stride_0, sum_1, mask_0)

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    out = x.new_empty([x.size(0)])
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 512
    _launcher(_helion_fn, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, out, x.size(0), out.stride(0), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_sqrt_does_not_specialize)
from __future__ import annotations

import math
import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, x_size_0, x_size_1, out_stride_0, out_stride_1, x_stride_0, x_stride_1, scale, _BLOCK_SIZE_0_1: tl.constexpr):
    offsets_0_1 = tl.program_id(0) * _BLOCK_SIZE_0_1 + tl.arange(0, _BLOCK_SIZE_0_1).to(tl.int32)
    indices_1 = offsets_0_1 % x_size_1
    indices_0 = offsets_0_1 // x_size_1
    mask_0_1 = offsets_0_1 < x_size_0 * x_size_1
    load = tl.load(x + (indices_0 * x_stride_0 + indices_1 * x_stride_1), mask_0_1, other=0)
    v_0 = load * scale
    tl.store(out + (indices_0 * out_stride_0 + indices_1 * out_stride_1), v_0, mask_0_1)

def fn(x: torch.Tensor, *, _launcher=_default_launcher):
    scale = 1.0 / math.sqrt(x.size(-1))
    out = torch.empty_like(x)
    _BLOCK_SIZE_0_1 = 32
    _launcher(_helion_fn, (triton.cdiv(x.size(0) * x.size(1), _BLOCK_SIZE_0_1), 1, 1), x, out, x.size(0), x.size(1), out.stride(0), out.stride(1), x.stride(0), x.stride(1), scale, _BLOCK_SIZE_0_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 1, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    v_0 = 0.0
    full = tl.full([64], 0, tl.float32)
    v_1 = v_0 * full
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_1_copy = v_1
        v_1_copy_0 = v_1_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_1 = v_1_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_1, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 1.0, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 1, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    v_0 = 0.0
    full = tl.full([64], 0, tl.float32)
    v_1 = v_0 * full
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_1_copy = v_1
        v_1_copy_0 = v_1_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_1 = v_1_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_1, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 1.0, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0.0, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 1.0, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_factory_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 1.0, tl.float32)
    full_1 = tl.full([64], 0, tl.float32)
    v_0 = grad_w_m * full_1
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        v_0_copy = v_0
        v_0_copy_0 = v_0_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        v_0 = v_0_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), v_0, mask_2)

def reduce_kernel(x: torch.Tensor, tensor_factory_fn, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = tensor_factory_fn(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_tensor_new_zeros_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0, tl.float32)
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        grad_w_m_copy = grad_w_m
        grad_w_m_copy_0 = grad_w_m_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        grad_w_m = grad_w_m_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), grad_w_m, mask_2)

def reduce_kernel(x: torch.Tensor, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    host_buffer = x.new_zeros(weight_shape, dtype=torch.float32)
    assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_torch_zeros_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0, tl.float32)
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        grad_w_m_copy = grad_w_m
        grad_w_m_copy_0 = grad_w_m_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        grad_w_m = grad_w_m_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), grad_w_m, mask_2)

def reduce_kernel(x: torch.Tensor, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    host_buffer = x.new_zeros(weight_shape, dtype=torch.float32)
    assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_zeros_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0, tl.float32)
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        grad_w_m_copy = grad_w_m
        grad_w_m_copy_0 = grad_w_m_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        grad_w_m = grad_w_m_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), grad_w_m, mask_2)

def reduce_kernel(x: torch.Tensor, zeros_factory, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = zeros_factory(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)

--- assertExpectedJournal(TestSpecialize.test_zeros_specialize_non_power_of_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_specialize as _source_module

@triton.jit
def _helion_reduce_kernel(x, grad_weight, x_size_0, grad_weight_stride_0, grad_weight_stride_1, x_stride_0, x_stride_1, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_2: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_3 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    mask_2 = indices_3 < 56
    grad_w_m = tl.full([64], 0.0, tl.float32)
    tile_end = tl.minimum(offset_0 + _BLOCK_SIZE_0, x_size_0)
    for offset_2 in tl.range(offset_0.to(tl.int32), tile_end.to(tl.int32), _BLOCK_SIZE_1):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_2 < tile_end
        grad_w_m_copy = grad_w_m
        grad_w_m_copy_0 = grad_w_m_copy
        load = tl.load(x + (indices_2[:, None] * x_stride_0 + indices_3[None, :] * x_stride_1), mask_1[:, None] & mask_2[None, :], other=0)
        sum_1 = tl.cast(tl.sum(load, 0), tl.float32)
        grad_w_m = grad_w_m_copy_0 + sum_1
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(grad_weight + (tile_id * grad_weight_stride_0 + indices_3 * grad_weight_stride_1), grad_w_m, mask_2)

def reduce_kernel(x: torch.Tensor, zeros_factory, test_host, *, _launcher=_default_launcher):
    m_block = 32
    grad_weight = x.new_empty([(x.size(0) + m_block - 1) // m_block, x.size(1)], dtype=torch.float32)
    weight_shape = 56
    if test_host:
        host_buffer = zeros_factory(x, weight_shape, dtype=torch.float32)
        assert host_buffer.size(0) == 56
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_2 = 64
    _BLOCK_SIZE_1 = 32
    _launcher(_helion_reduce_kernel, (triton.cdiv(x.size(0), _BLOCK_SIZE_0),), x, grad_weight, x.size(0), grad_weight.stride(0), grad_weight.stride(1), x.stride(0), x.stride(1), _BLOCK_SIZE_0, _RDIM_SIZE_2, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return grad_weight.sum(0).to(x.dtype)
