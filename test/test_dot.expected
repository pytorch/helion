This file is automatically generated by assertExpectedJournal calls in test_dot.py.
Update expected outputs by running tests with the EXPECTTEST_ACCEPT=1 environment variable set.

--- assertExpectedJournal(TestDot.test_addmm_multiple_small_dims)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_mm_small_dims(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(5, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 5
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < 7
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 6, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        mask_2 = indices_2 < 6
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 6 + indices_2[None, :] * 1), mask_0[:, None] & mask_2[None, :], other=0)
        load_1 = tl.load(y + (indices_2[:, None] * 7 + indices_1[None, :] * 1), mask_2[:, None] & mask_1[None, :], other=0)
        acc = tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 7 + indices_1[None, :] * 1), acc, mask_0[:, None] & mask_1[None, :])

def mm_small_dims(x: torch.Tensor, y: torch.Tensor, mm_func: Callable[[torch.Tensor, torch.Tensor, torch.Tensor], torch.Tensor], *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 16
    _BLOCK_SIZE_1 = 16
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 16
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_mm_small_dims, (triton.cdiv(5, _BLOCK_SIZE_0) * triton.cdiv(7, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_addmm_reshape_k_2)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_mm_reshape_k_2(x_reshaped, y_reshaped, out, out_stride_0, out_stride_1, x_reshaped_stride_0, x_reshaped_stride_1, y_reshaped_stride_0, y_reshaped_stride_1, m, n, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _RDIM_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(m, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < m
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < n
    indices_2 = tl.arange(0, _RDIM_SIZE_2).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: acc = mm_func(acc, x_reshaped[tile_m, :], y_reshaped[:, tile_n])
    load = tl.load(x_reshaped + (indices_0[:, None] * x_reshaped_stride_0 + indices_2[None, :] * x_reshaped_stride_1), mask_0[:, None], other=0)
    load_1 = tl.load(y_reshaped + (indices_2[:, None] * y_reshaped_stride_0 + indices_1[None, :] * y_reshaped_stride_1), mask_1[None, :], other=0)
    acc_1 = tl.dot(tl.reshape(tl.permute(tl.join(tl.reshape(tl.permute(tl.join(tl.reshape(tl.permute(tl.join(tl.cast(load, tl.bfloat16), tl.zeros_like(tl.cast(load, tl.bfloat16))), [0, 2, 1]), [16, 4]), tl.zeros_like(tl.reshape(tl.permute(tl.join(tl.cast(load, tl.bfloat16), tl.zeros_like(tl.cast(load, tl.bfloat16))), [0, 2, 1]), [16, 4]))), [0, 2, 1]), [16, 8]), tl.zeros_like(tl.reshape(tl.permute(tl.join(tl.reshape(tl.permute(tl.join(tl.cast(load, tl.bfloat16), tl.zeros_like(tl.cast(load, tl.bfloat16))), [0, 2, 1]), [16, 4]), tl.zeros_like(tl.reshape(tl.permute(tl.join(tl.cast(load, tl.bfloat16), tl.zeros_like(tl.cast(load, tl.bfloat16))), [0, 2, 1]), [16, 4]))), [0, 2, 1]), [16, 8]))), [0, 2, 1]), [16, 16]), tl.reshape(tl.permute(tl.join(tl.reshape(tl.permute(tl.join(tl.reshape(tl.permute(tl.join(tl.cast(load_1, tl.bfloat16), tl.zeros_like(tl.cast(load_1, tl.bfloat16))), [2, 0, 1]), [4, 16]), tl.zeros_like(tl.reshape(tl.permute(tl.join(tl.cast(load_1, tl.bfloat16), tl.zeros_like(tl.cast(load_1, tl.bfloat16))), [2, 0, 1]), [4, 16]))), [2, 0, 1]), [8, 16]), tl.zeros_like(tl.reshape(tl.permute(tl.join(tl.reshape(tl.permute(tl.join(tl.cast(load_1, tl.bfloat16), tl.zeros_like(tl.cast(load_1, tl.bfloat16))), [2, 0, 1]), [4, 16]), tl.zeros_like(tl.reshape(tl.permute(tl.join(tl.cast(load_1, tl.bfloat16), tl.zeros_like(tl.cast(load_1, tl.bfloat16))), [2, 0, 1]), [4, 16]))), [2, 0, 1]), [8, 16]))), [2, 0, 1]), [16, 16]), acc=acc, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), acc_1, mask_0[:, None] & mask_1[None, :])

def mm_reshape_k_2(x: torch.Tensor, y: torch.Tensor, mm_func: Callable[[torch.Tensor, torch.Tensor, torch.Tensor], torch.Tensor], *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m_total = x.size(0)
    m_total = x.size(0)
    # src[test_dot.py:N]: m = m_total // 2
    m = m_total // 2
    # src[test_dot.py:N]: x_reshaped = x.view(m, 2)  # M=m, K=2
    x_reshaped = x.view(m, 2)
    # src[test_dot.py:N]: n_total = y.size(0)
    n_total = y.size(0)
    # src[test_dot.py:N]: n = n_total // 2
    n = n_total // 2
    # src[test_dot.py:N]: y_reshaped = y.view(2, n)  # K=2, N=n
    y_reshaped = y.view(2, n)
    # src[test_dot.py:N]: out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 16
    _BLOCK_SIZE_1 = 16
    _RDIM_SIZE_2 = 2
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    # src[test_dot.py:N]:     # K is 2; don't tile it â€” slice with ':'
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_mm_reshape_k_2, (triton.cdiv(m, _BLOCK_SIZE_0) * triton.cdiv(n, _BLOCK_SIZE_1),), x_reshaped, y_reshaped, out, out.stride(0), out.stride(1), x_reshaped.stride(0), x_reshaped.stride(1), y_reshaped.stride(0), y_reshaped.stride(1), m, n, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _RDIM_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_addmm_reshape_m_1)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_mm_reshape_m_1(x_reshaped, y, out, out_stride_1, x_reshaped_stride_1, y_stride_0, y_stride_1, n, k, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    # src[test_dot.py:N]: for tile_n in hl.tile(n):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < n
    # src[test_dot.py:N]: acc = hl.zeros([1, tile_n], dtype=torch.float32)
    acc = tl.full([1, _BLOCK_SIZE_0], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x_reshaped[:, tile_k], y[tile_k, tile_n])
    for offset_1 in tl.range(0, k.to(tl.int32), _BLOCK_SIZE_1):
        indices_1 = offset_1 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_1 < k
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = mm_func(acc, x_reshaped[:, tile_k], y[tile_k, tile_n])
        load = tl.load(x_reshaped + indices_1[None, :] * x_reshaped_stride_1, mask_1[None, :], other=0)
        load_1 = tl.load(y + (indices_1[:, None] * y_stride_0 + indices_0[None, :] * y_stride_1), mask_1[:, None] & mask_0[None, :], other=0)
        acc = tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[:, tile_n] = acc
    tl.store(out + indices_0[None, :] * out_stride_1, acc, mask_0[None, :])

def mm_reshape_m_1(x: torch.Tensor, y: torch.Tensor, mm_func: Callable[[torch.Tensor, torch.Tensor, torch.Tensor], torch.Tensor], *, _launcher=_default_launcher):
    # src[test_dot.py:N]: k = x.size(0)
    k = x.size(0)
    # src[test_dot.py:N]: x_reshaped = x.view(1, k)  # M=1, K=k
    x_reshaped = x.view(1, k)
    # src[test_dot.py:N]: k2, n = y.size()
    k2, n = y.size()
    # src[test_dot.py:N]: assert k == k2
    assert k == k2
    # src[test_dot.py:N]: out = torch.zeros(1, n, dtype=torch.float32, device=x.device)
    out = torch.zeros(1, n, dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_n in hl.tile(n):
    _BLOCK_SIZE_0 = 16
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x_reshaped[:, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_1 = 16
    # src[test_dot.py:N]: for tile_n in hl.tile(n):
    # src[test_dot.py:N]:     acc = hl.zeros([1, tile_n], dtype=torch.float32)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_mm_reshape_m_1, (triton.cdiv(n, _BLOCK_SIZE_0),), x_reshaped, y, out, out.stride(1), x_reshaped.stride(1), y.stride(0), y.stride(1), n, k, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out.view(n)  # Reshape back to vector
    return out.view(n)

--- assertExpectedJournal(TestDot.test_hl_dot_multiple_small_dims)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_mm_small_dims(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(5, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 5
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < 7
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 6, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        mask_2 = indices_2 < 6
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 6 + indices_2[None, :] * 1), mask_0[:, None] & mask_2[None, :], other=0)
        load_1 = tl.load(y + (indices_2[:, None] * 7 + indices_1[None, :] * 1), mask_2[:, None] & mask_1[None, :], other=0)
        acc = tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 7 + indices_1[None, :] * 1), acc, mask_0[:, None] & mask_1[None, :])

def mm_small_dims(x: torch.Tensor, y: torch.Tensor, mm_func: Callable[[torch.Tensor, torch.Tensor, torch.Tensor], torch.Tensor], *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 16
    _BLOCK_SIZE_1 = 16
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 16
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_mm_small_dims, (triton.cdiv(5, _BLOCK_SIZE_0) * triton.cdiv(7, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_bfloat16_acc_None_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_bfloat16_acc_None_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_bfloat16_acc_float16_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_bfloat16_acc_float16_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_bfloat16_acc_float32_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_bfloat16_acc_float32_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float16_acc_None_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float16), tl.cast(load_1, tl.float16), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float16_acc_None_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float16), tl.cast(load_1, tl.float16), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float16_acc_float16_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float16), tl.cast(load_1, tl.float16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float16_acc_float16_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float16), tl.cast(load_1, tl.float16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float16_acc_float32_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float16), tl.cast(load_1, tl.float16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float16_acc_float32_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float16), tl.cast(load_1, tl.float16), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float32_acc_None_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float32), tl.cast(load_1, tl.float32), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float32_acc_None_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float32), tl.cast(load_1, tl.float32), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float32_acc_float16_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.float32), tl.cast(load_1, tl.float32), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float32_acc_float16_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.float32), tl.cast(load_1, tl.float32), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float32_acc_float32_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float32), tl.cast(load_1, tl.float32), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float32_acc_float32_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float32), tl.cast(load_1, tl.float32), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e4m3fn_acc_None_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float8e4nv), tl.cast(load_1, tl.float8e4nv), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e4m3fn_acc_None_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float8e4nv), tl.cast(load_1, tl.float8e4nv), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e4m3fn_acc_float16_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.float8e4nv), tl.cast(load_1, tl.float8e4nv), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e4m3fn_acc_float16_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.float8e4nv), tl.cast(load_1, tl.float8e4nv), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e4m3fn_acc_float32_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float8e4nv), tl.cast(load_1, tl.float8e4nv), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e4m3fn_acc_float32_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float8e4nv), tl.cast(load_1, tl.float8e4nv), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e5m2_acc_None_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float8e5), tl.cast(load_1, tl.float8e5), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e5m2_acc_None_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.float8e5), tl.cast(load_1, tl.float8e5), input_precision='tf32', out_dtype=tl.float32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e5m2_acc_float16_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.float8e5), tl.cast(load_1, tl.float8e5), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e5m2_acc_float16_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float16)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.float8e5), tl.cast(load_1, tl.float8e5), input_precision='tf32', out_dtype=tl.float32), tl.float16)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e5m2_acc_float32_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float8e5), tl.cast(load_1, tl.float8e5), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_float8_e5m2_acc_float32_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = tl.dot(tl.cast(load, tl.float8e5), tl.cast(load_1, tl.float8e5), acc=acc_copy_0, input_precision='tf32', out_dtype=tl.float32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_int8_acc_None_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0, tl.int32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.int8), tl.cast(load_1, tl.int8), input_precision='tf32', out_dtype=tl.int32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.int32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_int8_acc_None_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_dot_kernel_no_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0, tl.int32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        dot = tl.dot(tl.cast(load, tl.int8), tl.cast(load_1, tl.int8), input_precision='tf32', out_dtype=tl.int32)
        acc = acc_copy_0 + dot
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_no_acc_arg(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: if x.dtype == torch.int8:
    # src[test_dot.py:N]:     acc_dtype = torch.int32
    # src[test_dot.py:N]: else:
    # src[test_dot.py:N-N]: ...
    if x.dtype == torch.int8:
        # src[test_dot.py:N]: acc_dtype = torch.int32
        acc_dtype = torch.int32
    else:
        # src[test_dot.py:N]: acc_dtype = torch.float32
        acc_dtype = torch.float32
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=torch.int32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc += hl.dot(x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_no_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_int8_acc_int32_dynamic_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0, tl.int32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.int8), tl.cast(load_1, tl.int8), input_precision='tf32', out_dtype=tl.int32), tl.int32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_input_int8_acc_int32_static_shape)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_dot_kernel_acc_arg(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(64, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0, tl.int32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    for offset_2 in tl.range(0, 64, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
        load = tl.load(x + (indices_0[:, None] * 64 + indices_2[None, :] * 1), None)
        load_1 = tl.load(y + (indices_2[:, None] * 64 + indices_1[None, :] * 1), None)
        acc = acc_copy_0 + tl.cast(tl.dot(tl.cast(load, tl.int8), tl.cast(load_1, tl.int8), input_precision='tf32', out_dtype=tl.int32), tl.int32)
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 64 + indices_1[None, :] * 1), acc, None)

def dot_kernel_acc_arg(x: torch.Tensor, y: torch.Tensor, acc_dtype: torch.dtype, *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    out = torch.empty([m, n], dtype=acc_dtype, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = hl.dot(x[tile_m, tile_k], y[tile_k, tile_n], acc=acc)
    _BLOCK_SIZE_2 = 32
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=acc_dtype)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_dot_kernel_acc_arg, (triton.cdiv(64, _BLOCK_SIZE_0) * triton.cdiv(64, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_matmul_multiple_small_dims)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_mm_small_dims(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(5, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 5
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < 7
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 6, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        mask_2 = indices_2 < 6
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 6 + indices_2[None, :] * 1), mask_0[:, None] & mask_2[None, :], other=0)
        load_1 = tl.load(y + (indices_2[:, None] * 7 + indices_1[None, :] * 1), mask_2[:, None] & mask_1[None, :], other=0)
        mm = tl.cast(tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), input_precision='tf32', out_dtype=tl.float32), tl.bfloat16)
        v_0 = tl.cast(mm, tl.float32)
        acc = acc_copy_0 + v_0
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 7 + indices_1[None, :] * 1), acc, mask_0[:, None] & mask_1[None, :])

def mm_small_dims(x: torch.Tensor, y: torch.Tensor, mm_func: Callable[[torch.Tensor, torch.Tensor, torch.Tensor], torch.Tensor], *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 16
    _BLOCK_SIZE_1 = 16
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 16
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_mm_small_dims, (triton.cdiv(5, _BLOCK_SIZE_0) * triton.cdiv(7, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out

--- assertExpectedJournal(TestDot.test_mm_multiple_small_dims)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_dot as _source_module

@triton.jit
def _helion_mm_small_dims(x, y, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr, _BLOCK_SIZE_2: tl.constexpr):
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    num_blocks_0 = tl.cdiv(5, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 5
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < 7
    # src[test_dot.py:N]: acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    acc = tl.full([_BLOCK_SIZE_0, _BLOCK_SIZE_1], 0.0, tl.float32)
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    for offset_2 in tl.range(0, 6, _BLOCK_SIZE_2):
        indices_2 = offset_2 + tl.arange(0, _BLOCK_SIZE_2).to(tl.int32)
        mask_2 = indices_2 < 6
        acc_copy = acc
        acc_copy_0 = acc_copy
        # src[test_dot.py:N]: acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
        load = tl.load(x + (indices_0[:, None] * 6 + indices_2[None, :] * 1), mask_0[:, None] & mask_2[None, :], other=0)
        load_1 = tl.load(y + (indices_2[:, None] * 7 + indices_1[None, :] * 1), mask_2[:, None] & mask_1[None, :], other=0)
        mm = tl.cast(tl.dot(tl.cast(load, tl.bfloat16), tl.cast(load_1, tl.bfloat16), input_precision='tf32', out_dtype=tl.float32), tl.bfloat16)
        v_0 = tl.cast(mm, tl.float32)
        acc = acc_copy_0 + v_0
    # src[test_dot.py:N]: out[tile_m, tile_n] = acc
    tl.store(out + (indices_0[:, None] * 7 + indices_1[None, :] * 1), acc, mask_0[:, None] & mask_1[None, :])

def mm_small_dims(x: torch.Tensor, y: torch.Tensor, mm_func: Callable[[torch.Tensor, torch.Tensor, torch.Tensor], torch.Tensor], *, _launcher=_default_launcher):
    # src[test_dot.py:N]: m, k = x.size()
    m, k = x.size()
    # src[test_dot.py:N]: _, n = y.size()
    _, n = y.size()
    # src[test_dot.py:N]: out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    out = torch.zeros(m, n, dtype=torch.float32, device=x.device)
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    _BLOCK_SIZE_0 = 16
    _BLOCK_SIZE_1 = 16
    # src[test_dot.py:N]: for tile_k in hl.tile(k):
    # src[test_dot.py:N]:     acc = mm_func(acc, x[tile_m, tile_k], y[tile_k, tile_n])
    _BLOCK_SIZE_2 = 16
    # src[test_dot.py:N]: for tile_m, tile_n in hl.tile([m, n]):
    # src[test_dot.py:N]:     acc = hl.zeros([tile_m, tile_n], dtype=torch.float32)
    # src[test_dot.py:N]:     for tile_k in hl.tile(k):
    # src[test_dot.py:N-N]: ...
    _launcher(_helion_mm_small_dims, (triton.cdiv(5, _BLOCK_SIZE_0) * triton.cdiv(7, _BLOCK_SIZE_1),), x, y, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, _BLOCK_SIZE_2, num_warps=4, num_stages=1)
    # src[test_dot.py:N]: return out
    return out
