This file is automatically generated by assertExpectedJournal calls in test_signal_wait.py.
Update expected outputs by running tests with the EXPECTTEST_ACCEPT=1 environment variable set.

--- assertExpectedJournal(TestWait.test_global_sync)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_multi_bar_sync_kernel(signal_pad, signal_pad_stride_0, signal_pad_stride_1, N, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0
    for offset_1 in tl.range(0, N.to(tl.int32), _BLOCK_SIZE_1):
        indices_1 = offset_1 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        helion.runtime.triton_send_signal(addr=signal_pad + (indices_1 * signal_pad_stride_0 + offset_0 * signal_pad_stride_1), update=1, sem='relaxed', scope='gpu', op='atomic_xchg', skip_sync=True)
        helion.runtime.triton_wait_multiple_signal(addr=signal_pad + (offset_0 * signal_pad_stride_0 + indices_1 * signal_pad_stride_1), expect=1, update=0, sem='acquire', scope='gpu', op='ld', skip_sync=False)

def gmem_multi_bar_sync_kernel(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    M, N = signal_pad.shape
    assert M == N
    _BLOCK_SIZE_1 = N
    _launcher(_helion_gmem_multi_bar_sync_kernel, (N,), signal_pad, signal_pad.stride(0), signal_pad.stride(1), N, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return signal_pad

--- assertExpectedJournal(TestWait.test_signal_basic)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_signal_scalar_bar_kernel(signal_pad, signal_pad_stride_0):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0
    helion.runtime.triton_send_signal(addr=signal_pad + offset_0 * signal_pad_stride_0, update=1, sem='release', scope='gpu', op='atomic_xchg', skip_sync=False)

def gmem_signal_scalar_bar_kernel(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    n, = signal_pad.shape
    _launcher(_helion_gmem_signal_scalar_bar_kernel, (n,), signal_pad, signal_pad.stride(0), num_warps=4, num_stages=3)
    return signal_pad

--- assertExpectedJournal(TestWait.test_signal_cas)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_signal_cas_kernel(signal_pad, signal_pad_stride_0):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0
    helion.runtime.triton_wait_signal(addr=signal_pad + offset_0 * signal_pad_stride_0, expect=0, update=1, sem='release', scope='gpu', op='atomic_cas', skip_sync=True, sync_before=not False)

def gmem_signal_cas_kernel(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    n, = signal_pad.shape
    _launcher(_helion_gmem_signal_cas_kernel, (n,), signal_pad, signal_pad.stride(0), num_warps=4, num_stages=3)
    return signal_pad

--- assertExpectedJournal(TestWait.test_signal_multiple)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_signal_tensor_bar_kernel(signal_pad, signal_pad_stride_0, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    helion.runtime.triton_send_signal(addr=signal_pad + indices_0 * signal_pad_stride_0, update=1, sem='release', scope='gpu', op='atomic_xchg', skip_sync=False)

def gmem_signal_tensor_bar_kernel(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    n, = signal_pad.shape
    _BLOCK_SIZE_0 = 4
    _launcher(_helion_gmem_signal_tensor_bar_kernel, (triton.cdiv(n, _BLOCK_SIZE_0),), signal_pad, signal_pad.stride(0), _BLOCK_SIZE_0, num_warps=4, num_stages=3)
    return signal_pad

--- assertExpectedJournal(TestWait.test_signal_multiple_cas)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_signal_tensor_bar_kernel(signal_pad, signal_pad_stride_0, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    helion.runtime.triton_wait_multiple_signal(addr=signal_pad + indices_0 * signal_pad_stride_0, expect=0, update=1, sem='release', scope='gpu', op='atomic_cas', skip_sync=True, sync_before=not False)

def gmem_signal_tensor_bar_kernel(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    n, = signal_pad.shape
    _BLOCK_SIZE_0 = 4
    _launcher(_helion_gmem_signal_tensor_bar_kernel, (triton.cdiv(n, _BLOCK_SIZE_0),), signal_pad, signal_pad.stride(0), _BLOCK_SIZE_0, num_warps=4, num_stages=3)
    return signal_pad

--- assertExpectedJournal(TestWait.test_signal_stack_signalpad)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_signal_pointers_kernel(signal_pad_ptrs, signal_pad_ptrs_size_0, example_stride_0, signal_pad_ptrs_stride_0, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < signal_pad_ptrs_size_0
    ptr_tile = tl.load(signal_pad_ptrs + indices_1 * signal_pad_ptrs_stride_0, mask_1, other=0)
    helion.runtime.triton_send_signal(addr=ptr_tile.to(tl.pointer_type(tl.int32))[:] + (offset_0 * example_stride_0)[None], update=1, sem='release', scope='gpu', op='atomic_xchg', skip_sync=False)

def gmem_signal_pointers_kernel(signal_pad_ptrs: torch.Tensor, example: torch.Tensor, *, _launcher=_default_launcher):
    _RDIM_SIZE_1 = triton.next_power_of_2(signal_pad_ptrs.size(0))
    _launcher(_helion_gmem_signal_pointers_kernel, (example.size(0),), signal_pad_ptrs, signal_pad_ptrs.size(0), example.stride(0), signal_pad_ptrs.stride(0), _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return signal_pad_ptrs

--- assertExpectedJournal(TestWait.test_wait_2d_tile)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_wait_for_2d_tile_kernel(signal_pad, x, out, out_stride_0, out_stride_1, signal_pad_stride_0, signal_pad_stride_1, x_stride_0, x_stride_1, n, m, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    num_blocks_0 = tl.cdiv(n, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < n
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < m
    tile_id = offset_0 // _BLOCK_SIZE_0
    tile_id_1 = offset_1 // _BLOCK_SIZE_1
    helion.runtime.triton_wait_signal(addr=signal_pad + (tile_id * signal_pad_stride_0 + tile_id_1 * signal_pad_stride_1), expect=1, update=0, sem='acquire', scope='gpu', op='ld', skip_sync=False)
    load = tl.load(x + (indices_0[:, None] * x_stride_0 + indices_1[None, :] * x_stride_1), mask_0[:, None] & mask_1[None, :], other=0)
    tl.store(out + (indices_0[:, None] * out_stride_0 + indices_1[None, :] * out_stride_1), load, mask_0[:, None] & mask_1[None, :])

def wait_for_2d_tile_kernel(signal_pad: torch.Tensor, x: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(x)
    n, m = x.shape
    _BLOCK_SIZE_0 = 16
    _BLOCK_SIZE_1 = 16
    _launcher(_helion_wait_for_2d_tile_kernel, (triton.cdiv(n, _BLOCK_SIZE_0) * triton.cdiv(m, _BLOCK_SIZE_1),), signal_pad, x, out, out.stride(0), out.stride(1), signal_pad.stride(0), signal_pad.stride(1), x.stride(0), x.stride(1), n, m, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestWait.test_wait_basic)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_wait_kernel(signal_pad, out, out_stride_0, signal_pad_stride_0):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0
    helion.runtime.triton_wait_signal(addr=signal_pad + offset_0 * signal_pad_stride_0, expect=1, update=0, sem='acquire', scope='gpu', op='ld', skip_sync=False)
    tl.store(out + offset_0 * out_stride_0, offset_0, None)

def gmem_wait_kernel(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(signal_pad)
    n, = signal_pad.shape
    _launcher(_helion_gmem_wait_kernel, (n,), signal_pad, out, out.stride(0), signal_pad.stride(0), num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestWait.test_wait_multi_bar)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

import test.test_signal_wait as _source_module

@triton.jit
def _helion_gmem_wait_multi_bar_kernel(signal_pad, out, out_stride_0, signal_pad_stride_0, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    helion.runtime.triton_wait_multiple_signal(addr=signal_pad + indices_0 * signal_pad_stride_0, expect=1, update=0, sem='acquire', scope='gpu', op='ld', skip_sync=False)
    tile_id = offset_0 // _BLOCK_SIZE_0
    tl.store(out + tile_id * out_stride_0, tile_id, None)

def gmem_wait_multi_bar_kernel(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    N, = signal_pad.shape
    n = 4
    out = torch.empty(n, dtype=torch.int32, device=_source_module.DEVICE)
    _BLOCK_SIZE_0 = 4
    _launcher(_helion_gmem_wait_multi_bar_kernel, (triton.cdiv(N, _BLOCK_SIZE_0),), signal_pad, out, out.stride(0), signal_pad.stride(0), _BLOCK_SIZE_0, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestWait.test_wait_multi_bar_cas)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_wait_multi_bar_kernel_cas(signal_pad, signal_pad_stride_0, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    helion.runtime.triton_wait_multiple_signal(addr=signal_pad + indices_0 * signal_pad_stride_0, expect=1, update=2, sem='acquire', scope='gpu', op='atomic_cas', skip_sync=False)

def gmem_wait_multi_bar_kernel_cas(signal_pad: torch.Tensor, *, _launcher=_default_launcher):
    N, = signal_pad.shape
    _BLOCK_SIZE_0 = 4
    _launcher(_helion_gmem_wait_multi_bar_kernel_cas, (triton.cdiv(N, _BLOCK_SIZE_0),), signal_pad, signal_pad.stride(0), _BLOCK_SIZE_0, num_warps=4, num_stages=3)
    return signal_pad

--- assertExpectedJournal(TestWait.test_wait_pointers)
from __future__ import annotations

import torch
import helion
import helion.language as hl
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_wait_pointers_kernel(signal_pad_ptrs, out, out_stride_0, signal_pad_ptrs_stride_0, N, _BLOCK_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0
    for offset_1 in tl.range(0, N.to(tl.int32), _BLOCK_SIZE_1):
        indices_1 = offset_1 + tl.arange(0, _BLOCK_SIZE_1).to(tl.int32)
        mask_1 = indices_1 < N
        load = tl.load(signal_pad_ptrs + indices_1 * signal_pad_ptrs_stride_0, mask_1, other=0)
        symnode_0 = 4 * offset_0
        v_0 = symnode_0.to(tl.uint64)
        v_1 = load + v_0
        helion.runtime.triton_wait_multiple_signal(addr=v_1.to(tl.pointer_type(tl.int32)), expect=1, update=0, sem='acquire', scope='gpu', op='ld', skip_sync=False)
        tl.store(out + offset_0 * out_stride_0, offset_0, None)

def gmem_wait_pointers_kernel(signal_pad_ptrs: torch.Tensor, pad_shape: hl.constexpr, *, _launcher=_default_launcher):
    out = torch.empty(4, device=signal_pad_ptrs.device, dtype=torch.int32)
    N = signal_pad_ptrs.size(0)
    _BLOCK_SIZE_1 = N
    _launcher(_helion_gmem_wait_pointers_kernel, (4,), signal_pad_ptrs, out, out.stride(0), signal_pad_ptrs.stride(0), N, _BLOCK_SIZE_1, num_warps=4, num_stages=3)
    return out

--- assertExpectedJournal(TestWait.test_wait_stack_signalpad)
from __future__ import annotations

import torch
import helion
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_gmem_wait_pointers_kernel(signal_pad_ptrs, out, signal_pad_ptrs_size_0, example_stride_0, out_stride_0, signal_pad_ptrs_stride_0, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    mask_1 = indices_1 < signal_pad_ptrs_size_0
    dev_tile = tl.load(signal_pad_ptrs + indices_1 * signal_pad_ptrs_stride_0, mask_1, other=0)
    helion.runtime.triton_wait_multiple_signal(addr=dev_tile.to(tl.pointer_type(tl.int32))[:] + (offset_0 * example_stride_0)[None], expect=1, update=0, sem='acquire', scope='gpu', op='ld', skip_sync=False)
    tl.store(out + offset_0 * out_stride_0, offset_0, None)

def gmem_wait_pointers_kernel(signal_pad_ptrs: torch.Tensor, example: torch.Tensor, *, _launcher=_default_launcher):
    out = torch.empty_like(example)
    _RDIM_SIZE_1 = triton.next_power_of_2(signal_pad_ptrs.size(0))
    _launcher(_helion_gmem_wait_pointers_kernel, (example.size(0),), signal_pad_ptrs, out, signal_pad_ptrs.size(0), example.stride(0), out.stride(0), signal_pad_ptrs.stride(0), _RDIM_SIZE_1, num_warps=4, num_stages=3)
    return out
