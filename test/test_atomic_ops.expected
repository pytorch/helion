This file is automatically generated by assertExpectedJournal calls in test_atomic_ops.py.
Update expected outputs by running tests with the EXPECTTEST_ACCEPT=1 environment variable set.

--- assertExpectedJournal(TestAtomicOperations.test_2d_atomic_add)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_add_2d_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    num_blocks_0 = tl.cdiv(3, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 3
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    mask_1 = indices_1 < 4
    load = tl.load(y + (indices_0[:, None] * 4 + indices_1[None, :] * 1), mask_0[:, None] & mask_1[None, :], other=0)
    tl.atomic_add(x + (indices_0[:, None] * 4 + indices_1[None, :] * 1), load, mask=mask_0[:, None] & mask_1[None, :], sem='relaxed')

def atomic_add_2d_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    """Test atomic_add with 2D indexing."""
    _BLOCK_SIZE_0 = 8
    _BLOCK_SIZE_1 = 8
    _launcher(_helion_atomic_add_2d_kernel, (triton.cdiv(3, _BLOCK_SIZE_0) * triton.cdiv(4, _BLOCK_SIZE_1),), y, x, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_add_1d_tensor)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_add_1d_tensor_kernel(x, y, z, _BLOCK_SIZE_0: tl.constexpr, _RDIM_SIZE_1: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    indices_1 = tl.arange(0, _RDIM_SIZE_1).to(tl.int32)
    x_tile = tl.load(x + (indices_0[:, None] * 64 + indices_1[None, :] * 1), None)
    y_tile = tl.load(y + (indices_0[:, None] * 64 + indices_1[None, :] * 1), None)
    v_0 = x_tile * y_tile
    z_vec = tl.cast(tl.sum(v_0, 0), tl.float32)
    iota = tl.arange(0, 64)
    tl.atomic_add(z + iota * 1, z_vec, mask=None, sem='relaxed')

def atomic_add_1d_tensor_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    """Test atomic_add where the index is a 1D tensor"""
    m, n = x.shape
    n = 64
    z = torch.zeros([n], dtype=x.dtype, device=x.device)
    _BLOCK_SIZE_0 = 32
    _RDIM_SIZE_1 = 64
    _launcher(_helion_atomic_add_1d_tensor_kernel, (triton.cdiv(32, _BLOCK_SIZE_0),), x, y, z, _BLOCK_SIZE_0, _RDIM_SIZE_1, num_warps=4, num_stages=2)
    return z

--- assertExpectedJournal(TestAtomicOperations.test_atomic_add_float)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_add_float_kernel(indices, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 8
    idx = tl.load(indices + indices_0 * 1, mask_0, other=0)
    tl.atomic_add(x + idx * 1, 2.0, mask=mask_0, sem='relaxed')

def atomic_add_float_kernel(x: torch.Tensor, indices: torch.Tensor, *, _launcher=_default_launcher):
    """Test atomic_add with a float constant value and reading from lookup"""
    _BLOCK_SIZE_0 = 32
    _launcher(_helion_atomic_add_float_kernel, (triton.cdiv(8, _BLOCK_SIZE_0),), indices, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_add_returns_prev)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_k(y, x, prev, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(y + indices_0 * 1, None)
    old = tl.atomic_add(x + indices_0 * 1, load, mask=None, sem='relaxed')
    tl.store(prev + indices_0 * 1, old, None)

def k(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    prev = torch.empty_like(x)
    _BLOCK_SIZE_0 = 8
    _launcher(_helion_k, (triton.cdiv(8, _BLOCK_SIZE_0),), y, x, prev, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return (x, prev)

--- assertExpectedJournal(TestAtomicOperations.test_atomic_add_w_tile_attr)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_add_w_tile_attr(y, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    tl.atomic_add(y + offset_0 * 1, 1, mask=None, sem='relaxed')

def atomic_add_w_tile_attr(x: torch.Tensor, *, _launcher=_default_launcher):
    """Test atomic_add where the index is a symbolic int"""
    y = torch.zeros_like(x, device=x.device, dtype=torch.int32)
    _BLOCK_SIZE_0 = 2
    _launcher(_helion_atomic_add_w_tile_attr, (triton.cdiv(20, _BLOCK_SIZE_0),), y, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return y

--- assertExpectedJournal(TestAtomicOperations.test_atomic_and)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_and_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(y + indices_0 * 1, None)
    tl.atomic_and(x + indices_0 * 1, load, mask=None, sem='relaxed')

def atomic_and_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    _BLOCK_SIZE_0 = 8
    _launcher(_helion_atomic_and_kernel, (triton.cdiv(8, _BLOCK_SIZE_0),), y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_cas)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_cas_kernel(expect, y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(expect + indices_0 * 1, None)
    load_1 = tl.load(y + indices_0 * 1, None)
    tl.atomic_cas(x + indices_0 * 1, load, load_1, sem='relaxed')

def atomic_cas_kernel(x: torch.Tensor, y: torch.Tensor, expect: torch.Tensor, *, _launcher=_default_launcher):
    _BLOCK_SIZE_0 = 4
    _launcher(_helion_atomic_cas_kernel, (triton.cdiv(4, _BLOCK_SIZE_0),), expect, y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_max)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_max_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(y + indices_0 * 1, None)
    tl.atomic_max(x + indices_0 * 1, load, mask=None, sem='relaxed')

def atomic_max_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    _BLOCK_SIZE_0 = 4
    _launcher(_helion_atomic_max_kernel, (triton.cdiv(4, _BLOCK_SIZE_0),), y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_min)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_min_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(y + indices_0 * 1, None)
    tl.atomic_min(x + indices_0 * 1, load, mask=None, sem='relaxed')

def atomic_min_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    _BLOCK_SIZE_0 = 4
    _launcher(_helion_atomic_min_kernel, (triton.cdiv(4, _BLOCK_SIZE_0),), y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_or)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_or_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(y + indices_0 * 1, None)
    tl.atomic_or(x + indices_0 * 1, load, mask=None, sem='relaxed')

def atomic_or_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    _BLOCK_SIZE_0 = 8
    _launcher(_helion_atomic_or_kernel, (triton.cdiv(8, _BLOCK_SIZE_0),), y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_xchg)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_xchg_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(y + indices_0 * 1, None)
    tl.atomic_xchg(x + indices_0 * 1, load, mask=None, sem='relaxed')

def atomic_xchg_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    _BLOCK_SIZE_0 = 8
    _launcher(_helion_atomic_xchg_kernel, (triton.cdiv(8, _BLOCK_SIZE_0),), y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_atomic_xor)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_xor_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    load = tl.load(y + indices_0 * 1, None)
    tl.atomic_xor(x + indices_0 * 1, load, mask=None, sem='relaxed')

def atomic_xor_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    _BLOCK_SIZE_0 = 8
    _launcher(_helion_atomic_xor_kernel, (triton.cdiv(8, _BLOCK_SIZE_0),), y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_basic_atomic_add)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_add_kernel(y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 10
    load = tl.load(y + indices_0 * 1, mask_0, other=0)
    tl.atomic_add(x + indices_0 * 1, load, mask=mask_0, sem='relaxed')

def atomic_add_kernel(x: torch.Tensor, y: torch.Tensor, *, _launcher=_default_launcher):
    """Test basic atomic_add functionality."""
    _BLOCK_SIZE_0 = 32
    _launcher(_helion_atomic_add_kernel, (triton.cdiv(10, _BLOCK_SIZE_0),), y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x

--- assertExpectedJournal(TestAtomicOperations.test_overlapping_atomic_add)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_atomic_add_overlap_kernel(indices, y, x, _BLOCK_SIZE_0: tl.constexpr):
    pid_0 = tl.program_id(0)
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    mask_0 = indices_0 < 10
    idx = tl.load(indices + indices_0 * 1, mask_0, other=0)
    load_1 = tl.load(y + indices_0 * 1, mask_0, other=0)
    tl.atomic_add(x + idx * 1, load_1, mask=mask_0, sem='relaxed')

def atomic_add_overlap_kernel(x: torch.Tensor, y: torch.Tensor, indices: torch.Tensor, *, _launcher=_default_launcher):
    """Test atomic_add with overlapping indices."""
    _BLOCK_SIZE_0 = 32
    _launcher(_helion_atomic_add_overlap_kernel, (triton.cdiv(10, _BLOCK_SIZE_0),), indices, y, x, _BLOCK_SIZE_0, num_warps=4, num_stages=2)
    return x
