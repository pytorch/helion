This file is automatically generated by assertExpectedJournal calls in test_constexpr.py.
Update expected outputs by running tests with the EXPECTTEST_ACCEPT=1 environment variable set.

--- assertExpectedJournal(TestConstExpr.test_constexpr_float)
from __future__ import annotations

import torch
import helion.language as hl
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    num_blocks_0 = tl.cdiv(512, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_constexpr.py:N]: out[tile] = torch.sigmoid(x[tile] + v)
    load = tl.load(x + (indices_0[:, None] * 512 + indices_1[None, :] * 1), None)
    v_0 = 5.0
    v_1 = load + v_0
    v_2 = tl.sigmoid(tl.cast(v_1, tl.float32))
    tl.store(out + (indices_0[:, None] * 512 + indices_1[None, :] * 1), v_2, None)

def fn(x: torch.Tensor, v: hl.constexpr, *, _launcher=_default_launcher):
    # src[test_constexpr.py:N]: out = torch.empty_like(x)
    out = torch.empty_like(x)
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    # src[test_constexpr.py:N]:     out[tile] = torch.sigmoid(x[tile] + v)
    _launcher(_helion_fn, (triton.cdiv(512, _BLOCK_SIZE_0) * triton.cdiv(512, _BLOCK_SIZE_1),), x, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=1)
    # src[test_constexpr.py:N]: return out
    return out

--- assertExpectedJournal(TestConstExpr.test_constexpr_float_wrapped)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    num_blocks_0 = tl.cdiv(512, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_constexpr.py:N]: out[tile] = torch.sigmoid(x[tile] + v)
    load = tl.load(x + (indices_0[:, None] * 512 + indices_1[None, :] * 1), None)
    v_0 = 5.0
    v_1 = load + v_0
    v_2 = tl.sigmoid(tl.cast(v_1, tl.float32))
    tl.store(out + (indices_0[:, None] * 512 + indices_1[None, :] * 1), v_2, None)

def fn(x: torch.Tensor, v: float, *, _launcher=_default_launcher):
    # src[test_constexpr.py:N]: out = torch.empty_like(x)
    out = torch.empty_like(x)
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    # src[test_constexpr.py:N]:     out[tile] = torch.sigmoid(x[tile] + v)
    _launcher(_helion_fn, (triton.cdiv(512, _BLOCK_SIZE_0) * triton.cdiv(512, _BLOCK_SIZE_1),), x, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=1)
    # src[test_constexpr.py:N]: return out
    return out

--- assertExpectedJournal(TestConstExpr.test_constexpr_size)
from __future__ import annotations

import torch
import helion.language as hl
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    # src[test_constexpr.py:N]: for tile_b, tile_s in hl.tile([b, s]):
    num_blocks_0 = tl.cdiv(512, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_constexpr.py:N]: out[tile_b, tile_s] = x[tile_b].view(-1, 1).expand(tile_b, tile_s)
    load = tl.load(x + indices_0 * 1, None)
    view = tl.reshape(load, [_BLOCK_SIZE_0, 1])
    expand = tl.broadcast_to(view, [_BLOCK_SIZE_0, _BLOCK_SIZE_1])
    tl.store(out + (indices_0[:, None] * 16 + indices_1[None, :] * 1), expand, None)

def fn(x: torch.Tensor, s: hl.constexpr, *, _launcher=_default_launcher):
    # src[test_constexpr.py:N]: (b,) = x.size()
    b, = x.size()
    # src[test_constexpr.py:N]: out = torch.empty([b, s], device=x.device, dtype=x.dtype)
    out = torch.empty([b, 16], device=x.device, dtype=x.dtype)
    # src[test_constexpr.py:N]: for tile_b, tile_s in hl.tile([b, s]):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 16
    # src[test_constexpr.py:N]: for tile_b, tile_s in hl.tile([b, s]):
    # src[test_constexpr.py:N]:     out[tile_b, tile_s] = x[tile_b].view(-1, 1).expand(tile_b, tile_s)
    _launcher(_helion_fn, (triton.cdiv(512, _BLOCK_SIZE_0) * triton.cdiv(16, _BLOCK_SIZE_1),), x, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=1)
    # src[test_constexpr.py:N]: return out
    return out

--- assertExpectedJournal(TestConstExpr.test_string_literal_arg)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    num_blocks_0 = tl.cdiv(512, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_constexpr.py:N]: out[tile] = x[tile] + 1.0
    load = tl.load(x + (indices_0[:, None] * 512 + indices_1[None, :] * 1), None)
    v_0 = 1.0
    v_1 = load + v_0
    tl.store(out + (indices_0[:, None] * 512 + indices_1[None, :] * 1), v_1, None)

def fn(x: torch.Tensor, mode: str, *, _launcher=_default_launcher):
    # src[test_constexpr.py:N]: out = torch.empty_like(x)
    out = torch.empty_like(x)
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    # src[test_constexpr.py:N]:     if mode == "add":
    # src[test_constexpr.py:N]:         out[tile] = x[tile] + 1.0
    # src[test_constexpr.py:N-N]: ...
    _launcher(_helion_fn, (triton.cdiv(512, _BLOCK_SIZE_0) * triton.cdiv(512, _BLOCK_SIZE_1),), x, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=1)
    # src[test_constexpr.py:N]: return out
    return out

--- assertExpectedJournal(TestConstExpr.test_string_literal_arg)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    num_blocks_0 = tl.cdiv(512, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_constexpr.py:N]: out[tile] = x[tile] * 2.0
    load = tl.load(x + (indices_0[:, None] * 512 + indices_1[None, :] * 1), None)
    v_0 = 2.0
    v_1 = load * v_0
    tl.store(out + (indices_0[:, None] * 512 + indices_1[None, :] * 1), v_1, None)

def fn(x: torch.Tensor, mode: str, *, _launcher=_default_launcher):
    # src[test_constexpr.py:N]: out = torch.empty_like(x)
    out = torch.empty_like(x)
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    # src[test_constexpr.py:N]:     if mode == "add":
    # src[test_constexpr.py:N]:         out[tile] = x[tile] + 1.0
    # src[test_constexpr.py:N-N]: ...
    _launcher(_helion_fn, (triton.cdiv(512, _BLOCK_SIZE_0) * triton.cdiv(512, _BLOCK_SIZE_1),), x, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=1)
    # src[test_constexpr.py:N]: return out
    return out

--- assertExpectedJournal(TestConstExpr.test_string_literal_arg)
from __future__ import annotations

import torch
import triton
import triton.language as tl
from helion.runtime import default_launcher as _default_launcher

@triton.jit
def _helion_fn(x, out, _BLOCK_SIZE_0: tl.constexpr, _BLOCK_SIZE_1: tl.constexpr):
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    num_blocks_0 = tl.cdiv(512, _BLOCK_SIZE_0)
    pid_0 = tl.program_id(0) % num_blocks_0
    pid_1 = tl.program_id(0) // num_blocks_0
    offset_0 = pid_0 * _BLOCK_SIZE_0
    indices_0 = (offset_0 + tl.arange(0, _BLOCK_SIZE_0)).to(tl.int32)
    offset_1 = pid_1 * _BLOCK_SIZE_1
    indices_1 = (offset_1 + tl.arange(0, _BLOCK_SIZE_1)).to(tl.int32)
    # src[test_constexpr.py:N]: out[tile] = x[tile]
    load = tl.load(x + (indices_0[:, None] * 512 + indices_1[None, :] * 1), None)
    tl.store(out + (indices_0[:, None] * 512 + indices_1[None, :] * 1), load, None)

def fn(x: torch.Tensor, mode: str, *, _launcher=_default_launcher):
    # src[test_constexpr.py:N]: out = torch.empty_like(x)
    out = torch.empty_like(x)
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    _BLOCK_SIZE_0 = 32
    _BLOCK_SIZE_1 = 32
    # src[test_constexpr.py:N]: for tile in hl.tile(x.size()):
    # src[test_constexpr.py:N]:     if mode == "add":
    # src[test_constexpr.py:N]:         out[tile] = x[tile] + 1.0
    # src[test_constexpr.py:N-N]: ...
    _launcher(_helion_fn, (triton.cdiv(512, _BLOCK_SIZE_0) * triton.cdiv(512, _BLOCK_SIZE_1),), x, out, _BLOCK_SIZE_0, _BLOCK_SIZE_1, num_warps=4, num_stages=1)
    # src[test_constexpr.py:N]: return out
    return out
